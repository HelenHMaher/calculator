{"version":3,"sources":["parseString/index.js","Buttons/index.js","Display/index.js","App.js","serviceWorker.js","index.js"],"names":["parseString","string","newString","replace","Math","round","eval","Buttons","props","clear","operators","numbers","decimal","evaluate","className","id","onClick","value","Display","displayFormula","formula","message","currentValue","App","useState","currentVal","setCurrentVal","evaluated","setEvaluated","setFormula","setMessage","isOperator","endsWithOperator","flashError","setTimeout","e","target","length","test","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b727f377.chunk.js","sourcesContent":["export const parseString = (string) => {\n  const newString = string.replace(/[x]/g, \"*\");\n  return Math.round(1000000000 * eval(newString)) / 1000000000;\n};\n\nexport default parseString;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Buttons = (props) => {\n  const { clear, operators, numbers, decimal, evaluate } = props;\n  return (\n    <div className=\"button-container\">\n      <button id=\"clear\" onClick={clear} value=\"AC\">\n        AC\n      </button>\n      <button id=\"divide\" className=\"operator\" onClick={operators} value=\"/\">\n        &divide;\n      </button>\n      <button id=\"multiply\" className=\"operator\" onClick={operators} value=\"x\">\n        x\n      </button>\n      <button id=\"seven\" onClick={numbers} value=\"7\">\n        7\n      </button>\n      <button id=\"eight\" onClick={numbers} value=\"8\">\n        8\n      </button>\n      <button id=\"nine\" onClick={numbers} value=\"9\">\n        9\n      </button>\n      <button id=\"subtract\" className=\"operator\" onClick={operators} value=\"-\">\n        -\n      </button>\n      <button id=\"four\" onClick={numbers} value=\"4\">\n        4\n      </button>\n      <button id=\"five\" onClick={numbers} value=\"5\">\n        5\n      </button>\n      <button id=\"six\" onClick={numbers} value=\"6\">\n        6\n      </button>\n      <button id=\"add\" className=\"operator\" onClick={operators} value=\"+\">\n        +\n      </button>\n      <button id=\"one\" onClick={numbers} value=\"1\">\n        1\n      </button>\n      <button id=\"two\" onClick={numbers} value=\"2\">\n        2\n      </button>\n      <button id=\"three\" onClick={numbers} value=\"3\">\n        3\n      </button>\n      <button id=\"equals\" onClick={evaluate} value=\"=\">\n        =\n      </button>\n      <button id=\"zero\" onClick={numbers} value=\"0\">\n        0\n      </button>\n      <button id=\"decimal\" onClick={decimal} value=\".\">\n        .\n      </button>\n    </div>\n  );\n};\n\nexport default Buttons;\n\nButtons.propTypes = {\n  clear: PropTypes.func.isRequired,\n  operators: PropTypes.func.isRequired,\n  numbers: PropTypes.func.isRequired,\n  decimal: PropTypes.func.isRequired,\n  evaluate: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nexport const Display = (props) => {\n  const displayFormula = props.formula.replace(/[/]/g, \"\\u00F7\");\n  const displayCurVal = () =>\n    props.currentValue === \"/\" ? \"\\u00F7\" : props.currentValue;\n  return (\n    <div className=\"display-block\" id=\"displayBlock\">\n      <div className=\"error\" id=\"error\">\n        {props.message}\n      </div>\n      <div className=\"formula\" id=\"formula\">\n        {displayFormula}\n      </div>\n      <div className=\"display\" id=\"display\">\n        {displayCurVal()}\n      </div>\n    </div>\n  );\n};\n\nexport default Display;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./Buttons\";\nimport Display from \"./Display\";\nimport parseString from \"./parseString\";\n\nfunction App() {\n  const [currentVal, setCurrentVal] = useState(\"0\");\n  const [evaluated, setEvaluated] = useState(false);\n  const [formula, setFormula] = useState(\"0\");\n  const [message, setMessage] = useState(\"\");\n\n  const isOperator = /[x/+-]/;\n  const endsWithOperator = /[x/+-/]$/;\n\n  const flashError = () => {\n    setMessage(\"ERROR\");\n    setTimeout(() => setMessage(\"\"), 1500);\n  };\n\n  const handleClear = (e) => {\n    setCurrentVal(\"0\");\n    setEvaluated(false);\n    setFormula(\"0\");\n  };\n  const handleNumbers = (e) => {\n    const value = e.target.value;\n    if (currentVal.length === 12) {\n      flashError();\n    } else {\n      setFormula(formula === \"0\" || evaluated ? value : formula + value);\n      setCurrentVal(\n        currentVal === \"0\" || isOperator.test(currentVal) || evaluated\n          ? value\n          : currentVal + value\n      );\n    }\n    setEvaluated(false);\n  };\n  const handleEvaluate = (e) => {\n    if (isOperator.test(currentVal) || /[.]$/.test(currentVal)) {\n      setCurrentVal(parseString(formula.slice(0, formula.length - 1)));\n      setFormula(formula.slice(0, formula.length - 1));\n    } else {\n      setCurrentVal(parseString(formula));\n    }\n    setEvaluated(true);\n  };\n  const handleDecimal = (e) => {\n    const value = e.target.value;\n    if (evaluated === true) {\n      setCurrentVal(\"0\" + value);\n      setFormula(\"0\" + value);\n      setEvaluated(false);\n    } else if (/[.]/.test(currentVal) === true) {\n      flashError();\n    } else {\n      setCurrentVal(currentVal + value);\n      setFormula(formula + value);\n    }\n  };\n  const handleOperators = (e) => {\n    const value = e.target.value;\n    if (evaluated === true) {\n      setFormula(currentVal + value);\n    } else if (/[.]$/.test(formula) === true) {\n      setFormula(formula.replace(/[.]$/, value));\n    } else if (endsWithOperator.test(formula) === false) {\n      setFormula(formula + value);\n    } else if (/[-]/.test(value) === true && /[-]$/.test(formula) === false) {\n      setFormula(formula + value);\n    } else if (/[-]/.test(value) === true && /[-]$/.test(formula) === true) {\n      setFormula(formula.replace(/[x/+-]$/, value));\n    } else {\n      setFormula(formula.replace(/[x/+-]+$/, value));\n    }\n    setCurrentVal(value);\n    setEvaluated(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>JavaScript Calculator</p>\n      </header>\n      <div className=\"calculator\">\n        <Display\n          currentValue={currentVal}\n          formula={formula}\n          message={message}\n        />\n        <Buttons\n          clear={handleClear}\n          numbers={handleNumbers}\n          evaluate={handleEvaluate}\n          decimal={handleDecimal}\n          operators={handleOperators}\n        />\n      </div>\n      <footer className=\"App-footer\">\n        <p>Helen Maher 2020</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}